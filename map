. Map-reduce is a data processing for large volumes of data into useful aggregated results.






Aggregation

customercertificate.aggregate([

                   {
                "$match":{
                    isActive:true
                }

            },
                {

                    "$lookup": {
                        from: "customer",
                        localField: "customerId",
                        foreignField: "_id",
                        as: "data"

                    }
                },
                {
                    "$unwind": "$data"
                },

                {
                    "$project": {
                        "year": { "$year": "$dueDate" },
                        "month": { "$month": "$dueDate" },
                        "week": { "$week": "$dueDate" },
                        "day": { "$dayOfMonth": "$dueDate" },
                        "customerName": "$data.customerName",
                        "customerId": 1,
                        "customerPO": 1,
                        "serial": 1,
                        "imageName": 1
                    }
                },
                {
                    "$match": {
                        "month": month,
                        "year": year
                    }
                }
            ])



db.getCollection('users').aggregate([
    {
        $lookup: {
            from: "userinfo",
            localField: "userId",
            foreignField: "userId",
            as: "userInfoData"
        }
    },
    {
        $lookup: {
            from: "userrole",
            localField: "userId",
            foreignField: "userId",
            as: "userRoleData"
        }
    },
    { $unwind: { path: "$userInfoData", preserveNullAndEmptyArrays: true }},
    { $unwind: { path: "$userRoleData", preserveNullAndEmptyArrays: true }}
])            




{
customer_id : "A123",
amount : 500,
status : "A"
},
{
customer_id : "A123",
amount : 300,
status : "A"
},
{
customer_id : "B123",
amount : 400,
status : "A"
}
{
customer_id : "A123",
amount : 250,
status : "D"
}




db.order.mapReduce(
    function(){ emit(this.customer_id, this.amount); },
    function(key, values) {return Array.sum(values);},
               {
                 query : {status :"A"},
                  out : "order_total"

               }

)


--------------------------------


{
   _id: ObjectId(7df78ad8902c)
   title: 'MongoDB Overview', 
   description: 'MongoDB is no sql database',
   by_user: 'tutorials point',
   url: 'http://www.tutorialspoint.com',
   tags: ['mongodb', 'database', 'NoSQL'],
   likes: 100
},
{
   _id: ObjectId(7df78ad8902d)
   title: 'NoSQL Overview', 
   description: 'No sql database is very fast',
   by_user: 'tutorials point',
   url: 'http://www.tutorialspoint.com',
   tags: ['mongodb', 'database', 'NoSQL'],
   likes: 10
},
{
   _id: ObjectId(7df78ad8902e)
   title: 'Neo4j Overview', 
   description: 'Neo4j is no sql database',
   by_user: 'Neo4j',
   url: 'http://www.neo4j.com',
   tags: ['neo4j', 'database', 'NoSQL'],
   likes: 750
},








-----------------------------------------------------------\

Input records


{
    "_id" : ObjectId("5e75b8fef6f51357e4dad9f2"),
    "location" : {
        "street" : {
            "number" : 9360,
            "name" : "Travessa dos Açorianos"
        },
        "coordinates" : {
            "latitude" : -69.3199,
            "longitude" : 154.0748
        },
        "timezone" : {
            "offset" : "-8:00",
            "description" : "Pacific Time (US & Canada)"
        },
        "city" : "Divinópolis",
        "state" : "Espírito Santo",
        "country" : "Brazil",
        "postcode" : "23089"
    },
    "gender" : "female",
    "email" : "nicol.mendes@example.com",
    "login" : {
        "uuid" : "b932ef44-2afb-4b72-a1c5-47b2263bbab2",
        "username" : "goldenfish516",
        "password" : "sharks",
        "salt" : "O7UQElyh",
        "md5" : "9f217bf6d5d8576703dbd38e864f709f",
        "sha1" : "22a4dbba7eea9b47537ed9931b907ceae10f4de7",
        "sha256" : "2bcf93087fcd2ecc623702ad5727e5a24f33ee343c1871028a7950e770c53ee4"
    },
    "dob" : {
        "date" : ISODate("1983-09-10T18:56:41.614Z"),
        "age" : 37
    },
    "registered" : {
        "date" : ISODate("2005-04-10T08:57:39.425Z"),
        "age" : 15
    },
    "phone" : "(42) 7767-1119",
    "cell" : "(93) 9032-7161",
    "picture" : {
        "large" : "https://randomuser.me/api/portraits/women/16.jpg",
        "medium" : "https://randomuser.me/api/portraits/med/women/16.jpg",
        "thumbnail" : "https://randomuser.me/api/portraits/thumb/women/16.jpg"
    },
    "nat" : "BR",
    "updatedAt" : ISODate("2020-03-21T06:49:34.398Z"),
    "createdAt" : ISODate("2020-03-21T06:49:34.398Z"),
    "__v" : 0
}


--------------------------------------------------------------

       {
          $group: {
            _id: "$nat",
            "0-30": {
              $sum: {
                $cond: [
                  { $and: [{ $gte: ["$dob.age", 0] }, { $lt: ["$dob.age", 30] }] },
                  1,
                  0
                ]
              }
            },
            "30-50": {
              $sum: {
                $cond: [
                  { $and: [{ $gte: ["$dob.age", 30] }, { $lt: ["$dob.age", 50] }] },
                  1,
                  0
                ]
              }
            },
            "50plus": { $sum: { $cond: [{ $gte: ["$dob.age", 50] }, 1, 0] } }
          }
        },
        /** Group on nationality & push male & female objects into respective arrays */
        {
          $group: {
            _id: "$_id.nationality",
            male: {
              $push: {
                $cond: [
                  { $eq: ["$_id.gender", "male"] },
                  {
                    "0-30": "$$ROOT.0-30",
                    "30-50": "$$ROOT.30-50",
                    "50plus": "$$ROOT.50plus"
                  },
                  "$$REMOVE"
                ]
              }
            },
            female: {
              $push: {
                $cond: [
                  { $eq: ["$_id.gender", "female"] },
                  {
                    "0-30": "$$ROOT.0-30",
                    "30-50": "$$ROOT.30-50",
                    "50plus": "$$ROOT.50plus"
                  },
                  "$$REMOVE"
                ]
              }
            }
          }
        },
        {
          $project: {
            _id: 0,
            nationality: "$_id",
            female: { $arrayElemAt: ["$female", 0] }, // Get object from array
            male: { $arrayElemAt: ["$male", 0] }
          }
        }






db.mycol.aggregate([{$group : {_id : "$by_user", num_tutorial : {$sum : 1}}}])
